/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DownloadInfo
 */
export interface DownloadInfo {
    /**
     * 
     * @type {string}
     * @memberof DownloadInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadInfo
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface FileThumbnail
 */
export interface FileThumbnail {
    /**
     * 
     * @type {string}
     * @memberof FileThumbnail
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface FileThumbnails
 */
export interface FileThumbnails {
    /**
     * 
     * @type {Array<FileThumbnail>}
     * @memberof FileThumbnails
     */
    'items': Array<FileThumbnail>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'url': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storage/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileThumbnailUrls: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getFileThumbnailUrls', 'key', key)
            const localVarPath = `/storage/files/{key}/thumbnails`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileUrl: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getFileUrl', 'key', key)
            const localVarPath = `/storage/files/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileThumbnailUrls(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileThumbnails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileThumbnailUrls(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileUrl(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileUrl(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(options?: any): AxiosPromise<Transaction> {
            return localVarFp.createTransaction(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileThumbnailUrls(key: string, options?: any): AxiosPromise<FileThumbnails> {
            return localVarFp.getFileThumbnailUrls(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileUrl(key: string, options?: any): AxiosPromise<DownloadInfo> {
            return localVarFp.getFileUrl(key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTransaction(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTransaction(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFileThumbnailUrls(key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFileThumbnailUrls(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFileUrl(key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFileUrl(key, options).then((request) => request(this.axios, this.basePath));
    }
}


